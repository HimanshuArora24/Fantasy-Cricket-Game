# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FantasyCricGame.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from NewTeamWidget import Ui_Form1
from OpenTeamWidget import Ui_Form2
from SaveTeamWidget import Ui_Form3
from EvaluateScoreWidget import Ui_Form4
import scorecalc
import sqlite3
db = sqlite3.connect('PlayerData.db')
cur = db.cursor()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(739, 586)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.l1 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Constantia")
        font.setItalic(True)
        font.setUnderline(False)
        self.l1.setFont(font)
        self.l1.setObjectName("l1")
        self.horizontalLayout.addWidget(self.l1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.l2 = QtWidgets.QLabel(self.centralwidget)
        self.l2.setObjectName("l2")
        self.horizontalLayout_2.addWidget(self.l2)
        self.t1 = QtWidgets.QLineEdit(self.centralwidget)
        self.t1.setObjectName("t1")
        self.t1.setText('##')
        self.horizontalLayout_2.addWidget(self.t1)
        self.l3 = QtWidgets.QLabel(self.centralwidget)
        self.l3.setObjectName("l3")
        self.horizontalLayout_2.addWidget(self.l3)
        self.t2 = QtWidgets.QLineEdit(self.centralwidget)
        self.t2.setObjectName("t2")
        self.t2.setText('##')
        self.horizontalLayout_2.addWidget(self.t2)
        spacerItem1 = QtWidgets.QSpacerItem(17, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.l4 = QtWidgets.QLabel(self.centralwidget)
        self.l4.setObjectName("l4")
        self.horizontalLayout_2.addWidget(self.l4)
        self.t3 = QtWidgets.QLineEdit(self.centralwidget)
        self.t3.setObjectName("t3")
        self.t3.setText('##')
        self.horizontalLayout_2.addWidget(self.t3)
        self.l5 = QtWidgets.QLabel(self.centralwidget)
        self.l5.setObjectName("l5")
        self.horizontalLayout_2.addWidget(self.l5)
        self.t4 = QtWidgets.QLineEdit(self.centralwidget)
        self.t4.setObjectName("t4")
        self.t4.setText('##')
        self.horizontalLayout_2.addWidget(self.t4)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.l6 = QtWidgets.QLabel(self.centralwidget)
        self.l6.setObjectName("l6")
        self.horizontalLayout_3.addWidget(self.l6)
        self.t5 = QtWidgets.QLineEdit(self.centralwidget)
        self.t5.setObjectName("t5")
        self.t5.setText('##')
        self.horizontalLayout_3.addWidget(self.t5)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        spacerItem3 = QtWidgets.QSpacerItem(20, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.horizontalLayout_3.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.l7 = QtWidgets.QLabel(self.centralwidget)
        self.l7.setObjectName("l7")
        self.horizontalLayout_3.addWidget(self.l7)
        self.t6 = QtWidgets.QLineEdit(self.centralwidget)
        self.t6.setObjectName("t6")
        self.t6.setText('##')
        self.horizontalLayout_3.addWidget(self.t6)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.r1 = QtWidgets.QRadioButton(self.centralwidget)
        self.r1.setObjectName("r1")
        self.r1.toggled.connect(self.rbfnctn)
        self.horizontalLayout_5.addWidget(self.r1)
        self.r2 = QtWidgets.QRadioButton(self.centralwidget)
        self.r2.setObjectName("r2")
        self.r2.toggled.connect(self.rbfnctn)
        self.horizontalLayout_5.addWidget(self.r2)
        self.r3 = QtWidgets.QRadioButton(self.centralwidget)
        self.r3.setObjectName("r3")
        self.r3.toggled.connect(self.rbfnctn)
        self.horizontalLayout_5.addWidget(self.r3)
        self.r4 = QtWidgets.QRadioButton(self.centralwidget)
        self.r4.setObjectName("r4")
        self.r4.toggled.connect(self.rbfnctn)
        self.horizontalLayout_5.addWidget(self.r4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem5)
        spacerItem6 = QtWidgets.QSpacerItem(20, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.horizontalLayout_5.addItem(spacerItem6)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem7)
        self.l8 = QtWidgets.QLabel(self.centralwidget)
        self.l8.setObjectName("l8")
        self.horizontalLayout_5.addWidget(self.l8)
        self.t7 = QtWidgets.QLineEdit(self.centralwidget)
        self.t7.setObjectName("t7")
        self.t7.setText('##')
        self.horizontalLayout_5.addWidget(self.t7)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.playerList = []
        self.list1 = QtWidgets.QListWidget(self.centralwidget)
        self.list1.setObjectName("list1")
        self.list1.itemDoubleClicked.connect(self.removelist1)
        self.horizontalLayout_4.addWidget(self.list1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem8)
        self.list2 = QtWidgets.QListWidget(self.centralwidget)
        self.list2.setObjectName("list2")
        self.list2.itemDoubleClicked.connect(self.removelist2)
        self.horizontalLayout_4.addWidget(self.list2)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 739, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        self.action4 = QtWidgets.QAction(MainWindow)
        self.action4.setObjectName("action4")
        self.menu.addAction(self.action1)
        self.menu.addAction(self.action2)
        self.menu.addAction(self.action3)
        self.menu.addAction(self.action4)
        self.menubar.addAction(self.menu.menuAction())
        self.menu.triggered[QtWidgets.QAction].connect(self.menufunction)
        self.Form1 = QtWidgets.QWidget()
        self.ui1 = Ui_Form1()
        self.ui1.setupUi1(self.Form1)
        self.Form2 = QtWidgets.QWidget()
        self.ui2 = Ui_Form2()
        self.ui2.setupUi2(self.Form2)
        self.Form3 = QtWidgets.QWidget()
        self.ui3 = Ui_Form3()
        self.ui3.setupUi3(self.Form3)
        self.Form4 = QtWidgets.QWidget()
        self.ui4 = Ui_Form4()
        self.ui4.setupUi4(self.Form4)
        self.pointsUsed=0
        self.pointsAvailable=0
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.l1.setText(_translate("MainWindow", "Your Selections"))
        self.l2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.l3.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.l4.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.l5.setText(_translate("MainWindow", "Wicket-Keeper(WK)"))
        self.l6.setText(_translate("MainWindow", "Points Available"))
        self.l7.setText(_translate("MainWindow", "Points Used"))
        self.r1.setText(_translate("MainWindow", "BAT"))
        self.r2.setText(_translate("MainWindow", "BOW"))
        self.r3.setText(_translate("MainWindow", "AR"))
        self.r4.setText(_translate("MainWindow", "WK"))
        self.l8.setText(_translate("MainWindow", "Team Name"))
        self.menu.setTitle(_translate("MainWindow", "Manage Teams"))
        self.action1.setText(_translate("MainWindow", "NEW Team"))
        self.action2.setText(_translate("MainWindow", "OPEN Team"))
        self.action3.setText(_translate("MainWindow", "SAVE Team"))
        self.action4.setText(_translate("MainWindow", "EVALUATE Team"))
    
    def rbfnctn(self):
        if self.r1.isChecked()==True:
            self.list1.clear()
            txt = self.r1.text()
            sql = "Select Player from stats where ctg = '"+txt+"';"
            cur.execute(sql)
            while True:
                record = cur.fetchone()
                if record==None:
                    break
                if record[0] not in self.playerList:
                    self.list1.addItem(record[0])
                
        if self.r2.isChecked()==True:
            self.list1.clear()
            txt = self.r2.text()
            sql = "Select Player from stats where ctg = '"+txt+"';"
            cur.execute(sql)
            while True:
                record = cur.fetchone()
                if record==None:
                    break
                if record[0] not in self.playerList:
                    self.list1.addItem(record[0])

        if self.r3.isChecked()==True:
            self.list1.clear()
            txt = self.r3.text()
            sql = "Select Player from stats where ctg = '"+txt+"';"
            cur.execute(sql)
            while True:
                record = cur.fetchone()
                if record==None:
                    break
                if record[0] not in self.playerList:
                    self.list1.addItem(record[0])

        if self.r4.isChecked()==True:
            self.list1.clear()
            txt = self.r4.text()
            sql = "Select Player from stats where ctg = '"+txt+"';"
            cur.execute(sql)
            while True:
                record = cur.fetchone()
                if record==None:
                    break
                if record[0] not in self.playerList:
                    self.list1.addItem(record[0])

    def removelist1(self, item): 
        if (self.bat + self.bow + self.ar + self.wk < 11):
            self.list1.takeItem(self.list1.row(item))
            self.list2.addItem(item.text())
            txt = item.text()
            sql = "Select value from stats where Player = '"+txt+"';"
            cur.execute(sql)
            while True:
                record = cur.fetchone()
                if record==None:
                    break
                self.pointsUsed+=record[0]
            self.pointsAvailable=1000-(self.pointsUsed)
            self.t6.setText(str(self.pointsUsed))
            self.t5.setText(str(self.pointsAvailable))
            self.playerList.append(item.text())
            sql2 = "Select ctg from stats where Player= '"+txt+"';"
            cur.execute(sql2)
            while True:
                record2 = cur.fetchone()
                if record2==None:
                    break
                if record2[0]=="BAT":
                    self.bat+=1
                if record2[0]=="BOW":
                    self.bow+=1
                if record2[0]=="AR":
                    self.ar+=1
                if record2[0]=="WK":
                    self.wk+=1           
                self.t1.setText(str(self.bat))
                self.t2.setText(str(self.bow))
                self.t3.setText(str(self.ar))
                self.t4.setText(str(self.wk))
        else:
            self.msg = QMessageBox()
            self.msg.setIcon(QMessageBox.Critical)
            self.msg.setText("You already have 11 players in your team.")
            self.msg.exec()  
   
    def removelist2(self, item): 
        self.list2.takeItem(self.list2.row(item))
        self.list1.addItem(item.text())
        txt = item.text()
        sql = "Select value from stats where Player = '"+txt+"';"
        cur.execute(sql)
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.pointsAvailable+=record[0]
            self.t5.setText(str(self.pointsAvailable))
            self.pointsUsed=1000-(self.pointsAvailable)
            self.t6.setText(str(self.pointsUsed))
        if self.playerList.count(item.text())>0:
            self.playerList.remove(item.text())
        sql2 = "Select ctg from stats where Player= '"+txt+"';"
        cur.execute(sql2)
        while True:
            record2 = cur.fetchone()
            if record2==None:
                break
            if record2[0]=="BAT":
                self.bat-=1
            if record2[0]=="BOW":
                self.bow-=1
            if record2[0]=="AR":
                self.ar-=1
            if record2[0]=="WK":
                self.wk-=1           
            self.t1.setText(str(self.bat))
            self.t2.setText(str(self.bow))
            self.t3.setText(str(self.ar))
            self.t4.setText(str(self.wk))

    def menufunction(self,action):
        txt = (action.text())
        if txt == 'NEW Team':
            self.Form1.show()
            self.ui1.pushButton.clicked.connect(self.addTeam)
        elif txt == 'OPEN Team':
            self.Form2.show()
            cur.execute("Select distinct(name) from teams;")
            while True:
                record=cur.fetchone()
                if record==None:
                    break
                self.ui2.comboBox.addItem(record[0])
            self.ui2.pushButton.clicked.connect(self.addTeam2)
        elif txt == 'SAVE Team':
            self.msg = QMessageBox()
            self.msg.setIcon(QMessageBox.Critical)
            self.msg.setText("You can not make any changes to your team after saving")
            self.msg.exec()
            self.saveTeam()
        elif txt == 'EVALUATE Team':
            self.Form4.show()
            cur.execute("Select distinct(name) from teams;")
            while True:
                record=cur.fetchone()
                if record==None:
                    break
                self.ui4.comboBox.addItem(record[0])
            self.ui4.pushButton.clicked.connect(self.evaluateTeam)

    def addTeam(self):
        team = self.ui1.lineEdit.text()
        ##message box displaying error if the entered name is already a name of a team
        cur.execute("select count(name) from teams where name = '"+team+"';")
        while True:
            record=cur.fetchone()
            if record==None:
                break
            if record[0]==0:
                self.t7.setText(team)
                self.list1.clear()
                self.list2.clear()
                self.t1.setText("00")
                self.t2.setText("00")
                self.t3.setText("00")
                self.t4.setText("00")
                self.t5.setText("1000")
                self.t6.setText("00")
            else:
                self.msg = QMessageBox()
                self.msg.setIcon(QMessageBox.Critical)
                self.msg.setText("A team with this name already exists.")
                self.msg.exec()

##  addTeam2 is method for open team
    def addTeam2(self):
        self.list2.clear()
        team = self.ui2.comboBox.currentText()
        self.t7.setText(team)
        sql = "Select players from teams where name = '"+team+"';"
        cur.execute(sql)
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.list2.addItem(record[0])
        cur.execute('select count(players) from teams T where EXISTS( select * from stats S where T.players = S.Player and S.ctg="BAT" and name = "'+team+'");')
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.t1.setText(str(record[0]))
        cur.execute('select count(players) from teams T where EXISTS( select * from stats S where T.players = S.Player and S.ctg="BOW" and name = "'+team+'");')
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.t2.setText(str(record[0]))
        cur.execute('select count(players) from teams T where EXISTS( select * from stats S where T.players = S.Player and S.ctg="AR" and name = "'+team+'");')
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.t3.setText(str(record[0]))
        cur.execute('select count(players) from teams T where EXISTS( select * from stats S where T.players = S.Player and S.ctg="WK" and name = "'+team+'");')
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.t4.setText(str(record[0]))
        cur.execute("Select distinct(points_used) from teams where name = '"+team+"';")
        while True:
             record = cur.fetchone()
             if record==None:
                break
             self.t6.setText(str(record[0]))
        self.pointsUsed = int(self.t6.text())
        self.pointsAvailable = 1000-(self.pointsUsed)
        self.t5.setText(str(self.pointsAvailable))
        self.bat = int(self.t1.text())
        self.bow = int(self.t2.text())
        self.ar = int(self.t3.text())
        self.wk = int(self.t4.text())
        ## self.playerList will be cleared and appended by the list2
        self.playerList.clear()
        for idx in range(0, self.list2.count()):
            self.playerList.append(self.list2.item(idx).text())
        

    def saveTeam(self):
        if (self.bat + self.bow + self.ar + self.wk == 11 and self.bow>=3 and self.bat>=4 and self.wk>=1 and int(self.t5.text())>=0):
            try:
                name = self.t7.text()
                points = int(self.t6.text())
                self.players = []
                for idx in range(0, self.list2.count()):
                    self.players.append(self.list2.item(idx).text())
                for idx in range(0,len(self.players)):
                    cur.execute("insert into teams (name,players,points_used) values (?,?,?);",(str(name),self.players[idx],points))
                    db.commit()
                self.Form3.show()
            except sqlite3.IntegrityError:
                self.msg = QMessageBox()
                self.msg.setIcon(QMessageBox.Critical)
                self.msg.setText("The team is already saved")
                self.msg.exec()
        else:
            self.msg = QMessageBox()
            self.msg.setIcon(QMessageBox.Critical)
            self.msg.setText("The team must have 11 players including atleast 3 bowlers,4 batsman and a wicketkeeper and you should not use more than 1000 points")
            self.msg.exec()

    def evaluateTeam(self):
        self.ui4.listWidget_2.clear()
        team = self.ui4.comboBox.currentText()
        teampoints=0
        cur.execute("Select players from teams where name = '"+team+"'")
        while True:
            record = cur.fetchone()
            if record==None:
                break
            self.ui4.listWidget_2.addItem(record[0])
        self.players = []
        for idx in range(0, self.ui4.listWidget_2.count()):
            self.players.append(self.ui4.listWidget_2.item(idx).text())
        
        for player in self.players:
            cur.execute("select ctg from stats where Player = '"+player+"'")
            while True:
                ctg = cur.fetchone()
                if ctg==None:
                    break
                if (ctg[0]=="BAT" or ctg[0]=="WK"):
                    cur.execute("select Scored,Fours,Sixes,Faced from match where Player = '"+player+"';")
                    while True:
                        record = cur.fetchone()
                        if record==None:
                            break
                        points = scorecalc.batpoints(record[0],record[1],record[2],record[3])
                    cur.execute("select Catches,Stumping,Run_out from match where player = '"+player+"'")
                    while True:
                        record2 = cur.fetchone()
                        if record2==None:
                            break
                        points += scorecalc.fieldpoints(record2[0],record2[1],record2[2])
                    self.ui4.listWidget.addItem(str(points))
                    teampoints+=points
                elif(ctg[0]=="BOW"):
                    cur.execute("select Wkts,Bowled/6 as Overs,Given from match where Player = '"+player+"';")
                    while True:
                        record = cur.fetchone()
                        if record==None:
                            break
                        points = scorecalc.bowlpoints(record[0],record[1],record[2])
                    cur.execute("select Catches,Stumping,Run_out from match where player = '"+player+"'")
                    while True:
                        record2 = cur.fetchone()
                        if record2==None:
                            break
                        points += scorecalc.fieldpoints(record2[0],record2[1],record2[2])
                    self.ui4.listWidget.addItem(str(points))
                    teampoints+=points
                elif(ctg[0]=="AR"):
                    cur.execute("select Scored,Fours,Sixes,Faced from match where Player = '"+player+"';")
                    while True:
                        record = cur.fetchone()
                        if record==None:
                            break
                        points = scorecalc.batpoints(record[0],record[1],record[2],record[3])
                    cur.execute("select Catches,Stumping,Run_out from match where player = '"+player+"'")
                    while True:
                        record2 = cur.fetchone()
                        if record2==None:
                            break
                        points += scorecalc.fieldpoints(record2[0],record2[1],record2[2])
                    cur.execute("select Wkts,Bowled/6 as Overs,Given from match where Player = '"+player+"';")
                    while True:
                        record3 = cur.fetchone()
                        if record3==None:
                            break
                        points += scorecalc.bowlpoints(record3[0],record3[1],record3[2])
                    self.ui4.listWidget.addItem(str(points))
                    teampoints+=points
        self.ui4.lineEdit.setText(str(teampoints))
                
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
